{"version":3,"sources":["components/Search.js","components/Movie.js","components/MovieList.js","components/MovieDetails.js","App.js","serviceWorker.js","index.js"],"names":["Search","_this$props","this","props","value","handleChange","handleSubmit","react_default","a","createElement","className","id","onSubmit","type","name","placeholder","onChange","Component","Movie","_this$props$movie","movie","Poster","Title","src","alt","onClick","handleDetails","MovieList","index","_this","setState","movieID","movies","searchInput","error","Fragment","Search_Search","map","Movie_Movie","key","imdbID","MovieDetails","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","fetch","concat","data","json","jsonData","console","log","_context","t0","handleIndex","_this$state$movie","Actors","Awards","Country","Director","Genre","Language","Plot","Rated","Released","Runtime","Writer","imdbRating","href","target","rel","App","searchedFor","e","preventDefault","getMovies","displayPage","MovieList_MovieList","MovieDetails_MovieDetails","undefined","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb64ca74.chunk.js","sourcesContent":["/***** IMPORTS *****/\r\n\r\nimport React, { Component } from 'react'\r\n\r\n/***** Search Component *****/\r\nexport default class Search extends Component {\r\n  render() {\r\n  \r\n  // Destructuring\r\n  const { value, handleChange, handleSubmit } = this.props\r\n\r\n    return (\r\n      <div className='searchContainer'>\r\n        <h1 id='title'>Search For Movies</h1>\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type='text'\r\n                name='search'\r\n                placeholder='Search for a movie...'\r\n                onChange={handleChange}\r\n                value={value}\r\n                className='searchInput'\r\n            />\r\n            <button\r\n                type='submit'\r\n                className='button searchBtn'\r\n            >\r\n                <i className=\"fas fa-search\"></i>\r\n            </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","/***** IMPORTS *****/\r\n\r\nimport React, { Component } from 'react'\r\n\r\n/***** Movie Component *****/\r\nexport default class Movie extends Component {\r\n  render() {\r\n      // Destructuring\r\n      const {\r\n          Poster,\r\n          Title,\r\n      } = this.props.movie\r\n\r\n    return (\r\n      <div className='movie'>\r\n        <img \r\n            src={Poster} \r\n            alt=\"Movie Poster\"\r\n            className='poster'\r\n        />\r\n        <h2 className='movieTitle'>{Title}</h2>\r\n        <button\r\n            type='button'\r\n            onClick={this.props.handleDetails}\r\n            className='button'\r\n        >\r\n            MOVIE DETAILS\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","/***** IMPORTS *****/\r\n\r\nimport React, { Component } from 'react'\r\nimport Search from './Search'\r\nimport Movie from './Movie'\r\n\r\n\r\n/***** MovieList Component *****/\r\nexport default class MovieList extends Component {\r\n    // Update Index and movieID Values in State\r\n    handleDetails = (index, id) => {\r\n        this.setState({\r\n          index: index,\r\n          movieID: id\r\n        })\r\n      }\r\n      \r\n  render() {\r\n    // Destructuring\r\n    const { movies, handleDetails, searchInput, handleChange, handleSubmit, error } = this.props\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Search \r\n            handleChange={handleChange}\r\n            handleSubmit={handleSubmit}\r\n            value={searchInput}\r\n        />\r\n        <div className='moviesContainer'>\r\n           {error ? <h1 className='error'>{error}</h1> :\r\n                movies.map(movie => {\r\n                    return (\r\n                        <Movie \r\n                            key={movie.imdbID}\r\n                            movie={movie}\r\n                            handleDetails={()=>handleDetails(1, movie.imdbID)}\r\n                            id={movie.imdbID}\r\n                        />\r\n                    )\r\n                })\r\n           }\r\n            \r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","/***** IMPORTS *****/\r\n\r\nimport React, { Component } from 'react'\r\n\r\n/***** MovieDetails Component *****/\r\nexport default class MovieDetails extends Component {\r\n  constructor() {\r\n      super()\r\n      this.state = {\r\n          movie: []\r\n      }\r\n  }\r\n\r\n  /***** Make Request to API and Receive Data *****/\r\n  async componentDidMount() {\r\n    try {\r\n      // Send Request to API\r\n      const data = await fetch(`https://www.omdbapi.com/?i=${this.props.id}&apikey=d3561ec4`)\r\n\r\n      // Convert Response into json\r\n      const jsonData = await data.json()\r\n\r\n      // Populate State With Data\r\n      this.setState({movie: jsonData})\r\n    } catch(error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // Destructuring\r\n    const { handleIndex } = this.props\r\n    const { Title, \r\n            Poster, \r\n            Actors, \r\n            Awards, \r\n            Country, \r\n            Director, \r\n            Genre, \r\n            Language, \r\n            Plot, \r\n            Rated, \r\n            Released, \r\n            Runtime, \r\n            Writer, \r\n            imdbRating,\r\n            imdbID\r\n        } = this.state.movie\r\n\r\n        console.log(this.state.movie)\r\n    return (\r\n      <div className='pageContainer'>\r\n        <div className='detailsContainer'>\r\n           <div className=\"posterContainer\">\r\n            <img \r\n              src={Poster} \r\n              alt=\"Movie Poster\"\r\n              className='detailsPoster'\r\n          />\r\n            <h1 className='detailTitle'>{Title}</h1>\r\n          </div>\r\n          <div className=\"listContainer\">\r\n            <ul className='detailsList'>\r\n                <li>GENRE: {Genre}</li>\r\n                <li>RELEASED: {Released}</li>\r\n                <li>RATED: {Rated}</li>\r\n                <li>RUNTIME: {Runtime}</li>\r\n                <li>DIRECTOR: {Director}</li>\r\n                <li>WRITER: {Writer}</li>\r\n                <li>ACTORS: {Actors}</li>\r\n                <li>LANGUAGE: {Language}</li>\r\n                <li>COUNTRY: {Country}</li>\r\n                <li>IMDb RATING: {imdbRating}</li>\r\n                <li>AWARDS: {Awards}</li>\r\n            </ul>\r\n          </div>\r\n          <p className='plot'>PLOT: {Plot}</p>\r\n        </div>\r\n        <button type='button' className='button imdbBtn' > \r\n          <a \r\n            href={`http://imdb.com/title/${imdbID}`}\r\n            target=\"_blank\"\r\n            rel='noopener noreferrer'\r\n          >\r\n            VIEW ON IMDB\r\n          </a>\r\n        </button>\r\n        <button\r\n            type='button'\r\n            onClick={()=>handleIndex(0)}\r\n            className='button'\r\n        >\r\n            BACK TO SEARCH\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","/***** IMPORTS *****/\n\nimport React, { Component } from 'react';\nimport './App.css';\n\nimport MovieList from './components/MovieList'\nimport MovieDetails from './components/MovieDetails';\n\n\nclass App extends Component {\n  state = {\n    movies: [],\n    searchInput: '',\n    searchedFor: '',\n    index: 0,\n    movieID: '',\n    error: ''\n  }\n\n  /***** MAKE API REQUEST AND RECEIVE DATA*****/\n  async getMovies() {\n    try{\n      // Make Request to API\n      const data = await fetch(`https://www.omdbapi.com/?s=${this.state.searchedFor}&apikey=d3561ec4`)\n      // Convert Response into json\n      const jsonData = await data.json()\n\n      // Check If There Is Results\n      if(jsonData.Search === undefined) {\n        // Display if there is no results\n        this.setState(() => {\n          return {error: 'No Results Found'}\n        })\n      } else {\n        // Populate State With Data If There Are Results\n        this.setState(() => {\n          return {movies: jsonData.Search, error: ''}\n        })\n      }\n\n    } catch(error) {\n      console.log(error)\n    }\n  }\n  \n  /***** METHODS *****/\n\n  // Handle Form Submit\n  handleSubmit = (e) => {\n    // Prevent Default Actions(Prevent Page Reloading)\n    e.preventDefault()\n\n    // Call Method to Make Request to API\n    this.getMovies()\n\n    // Clear searchInput value in state\n    this.setState({\n      searchInput: ''\n    })\n  }\n\n  // Set State Values to the Value in the Text Input\n  handleChange = (e) => {\n    this.setState({\n      searchInput: e.target.value,\n      searchedFor: e.target.value\n    })\n  }\n\n  // Update Page Index Value in State\n  handleIndex = index => {\n    this.setState({\n      index: index\n    })\n  }\n\n  // Update Index and movieID Values in State\n  handleDetails = (index, id) => {\n    this.setState({\n      index: index,\n      movieID: id\n    })\n  }\n\n  /***** Conditional To Determine Which Components to Display *****/\n  displayPage = index => {\n    switch(index) {\n      // If index Value in State is 0, Display the MovieList Component\n      case 0: \n        return (\n          <MovieList \n            movies={this.state.movies}\n            handleChange={this.handleChange}\n            handleSubmit={this.handleSubmit}\n            value={this.state.searchInput}\n            handleDetails={this.handleDetails}\n            error={this.state.error}\n          />\n        )\n      // If index Value in State is 1, Display the MovieDetails Component\n      case 1:\n        return (\n          <MovieDetails \n            handleIndex={this.handleIndex}\n            id={this.state.movieID}\n          />\n        )\n        default:\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.displayPage(this.state.index)}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}